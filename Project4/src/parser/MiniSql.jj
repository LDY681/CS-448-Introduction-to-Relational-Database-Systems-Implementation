/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\MiniSql.jj */
/*@egen*//*
 * MiniSql.jjt
 *
 * This file contains the entire grammar for MiniSQL, the simple query
 * language for Minibase.
 *
 * Based on FormsPlSql.jj by S. Ramanathan (sramji@rocketmail.com)
 * see javacc.dev.java.net/servlets/ProjectDocumentList?folderID=110
 *
 * Written by Chris Mayfield for CS 448, Spring 2006, Purdue University
 */

options {                                              
  IGNORE_CASE = true;
  STATIC = false;
}

/*****************************************************************************\
 * Parser Class
\*****************************************************************************/

PARSER_BEGIN(MiniSql)
package parser;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import global.AttrType;
import global.AttrOperator;

@SuppressWarnings( { "unchecked", "unused", "static-access" })
public class MiniSql/*@bgen(jjtree)*/implements MiniSqlTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTMiniSqlState jjtree = new JJTMiniSqlState();

/*@egen*/

  public static void main(String args[]) throws ParseException {

    MiniSql p = null;
    if (args.length < 1) {

      System.out.println("Reading from stdin.");
      p = new MiniSql(System.in);

    } else {

      try {
        p = new MiniSql(new DataInputStream(new FileInputStream(args[0])));
        System.out.println("Reading from " + args[0]);
      } catch (FileNotFoundException e) {
        System.out.println(args[0] + " not found; reading from stdin.");
        p = new MiniSql(System.in);
      }

    } // else

    p.SqlStatement();
    System.out.println("Parse Successful");

  }

}

PARSER_END(MiniSql)

/*****************************************************************************\
 * Lexical Analysis
\*****************************************************************************/

SKIP:
{
  " " | "\f" | "\t" | "\r" | "\n"
}

/*
 *  Prefix   Meaning
 * ---------------------
 *  K_       Keyword
 *  O_       Operator
 *  S_       Substitute
 */

TOKEN: /* SQL Keywords */
{
    < K_AND: "AND" >
  | < K_BY: "BY" >
  | < K_CREATE: "CREATE" >
  | < K_DELETE: "DELETE" >
  | < K_DESC: "DESC" >
  | < K_DESCRIBE: "DESCRIBE" >
  | < K_DISTINCT: "DISTINCT" >
  | < K_DROP: "DROP" >
  | < K_EXPLAIN: "EXPLAIN" >
  | < K_HELP: "HELP" >
  | < K_FLOAT: "FLOAT" >
  | < K_FROM: "FROM" >
  | < K_INDEX: "INDEX" >
  | < K_INSERT: "INSERT" >
  | < K_INTEGER: "INTEGER" >
  | < K_INTO: "INTO" >
  | < K_ON: "ON" >
  | < K_OR: "OR" >
  | < K_ORDER: "ORDER" >
  | < K_QUIT: "QUIT" >
  | < K_SELECT: "SELECT" >
  | < K_SET: "SET" >
  | < K_STRING: "STRING" >
  | < K_STATS: "STATS" >
  | < K_TABLE: "TABLE" >
  | < K_UPDATE: "UPDATE" >
  | < K_VALUES: "VALUES" >
  | < K_WHERE: "WHERE" >
}

TOKEN: /* SQL Operators */
{
    < O_EQ: "=" >
  | < O_NEQ: "<>" >
  | < O_GT: ">" >
  | < O_GTE: ">=" >
  | < O_LT: "<" >
  | < O_LTE: "<=" >
  | < O_LPAREN: "(" >
  | < O_RPAREN: ")" >
  | < O_COMMA: "," >
  | < O_SEMI: ";" >
  | < O_STAR: "*" >
}

TOKEN: /* Numeric Constants */
{
  < S_INTEGER: ("-")? ( <DIGIT> )+ >
  |
  < #DIGIT: ["0" - "9"] >
  |
  < S_FLOAT: ("-")? ( <S_INTEGER> )? "." <S_INTEGER> >
}

TOKEN: /* IDs and Strings */
{
  < S_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> | <SPECIAL_CHAR> )* >
  |
  < #LETTER: ["a"-"z", "A"-"Z"] >
  |
  < #SPECIAL_CHAR: "$" | "_" >
  |
  < S_STRING: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
}

SPECIAL_TOKEN: /* SQL Comments */
{
  < LINE_COMMENT: "--"(~["\r","\n"])* >
  |
  < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
}

/*****************************************************************************\
 * Top-Level Statements
\*****************************************************************************/

AST_Start Start()         : {/*@bgen(jjtree) _Start */
  AST_Start jjtn000 = new AST_Start(JJT_START);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _Start */
  try {
/*@egen*/
  <K_HELP>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.isHelp = true; return jjtn000; }
  |
  <K_STATS>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.isStats = true; return jjtn000; }
  |
  <K_QUIT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { jjtn000.isQuit = true; return jjtn000; }
  |
  SqlStatement() <O_SEMI>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SqlStatement() : {}
{
  LOOKAHEAD(2) CreateTableStmt()
  |
  CreateIndexStmt()
  |
  LOOKAHEAD(2) DropTableStmt()
  |
  DropIndexStmt()
  |
  DescribeStatement()
  |
  InsertStatement()
  |
  SelectStatement()
  |
  UpdateStatement()
  |
  DeleteStatement()
}

void CreateTableStmt()               : {/*@bgen(jjtree) _CreateTable */
  AST_CreateTable jjtn000 = new AST_CreateTable(JJT_CREATETABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _CreateTable */
  try {
/*@egen*/
  <K_CREATE> <K_TABLE> <S_IDENTIFIER>
  {jjtn000.fileName = token.image;}
  <O_LPAREN> ColumnList() <O_RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CreateIndexStmt()               : {/*@bgen(jjtree) _CreateIndex */
  AST_CreateIndex jjtn000 = new AST_CreateIndex(JJT_CREATEINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _CreateIndex */
  try {
/*@egen*/
  <K_CREATE> <K_INDEX> <S_IDENTIFIER>
  {jjtn000.fileName = token.image;}
  <K_ON> <S_IDENTIFIER>
  {jjtn000.ixTable = token.image;}
  <O_LPAREN> <S_IDENTIFIER> {jjtn000.ixColumn = token.image;} <O_RPAREN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DropTableStmt()             : {/*@bgen(jjtree) _DropTable */
  AST_DropTable jjtn000 = new AST_DropTable(JJT_DROPTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _DropTable */
  try {
/*@egen*/
  <K_DROP> <K_TABLE> <S_IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.fileName = token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DropIndexStmt()             : {/*@bgen(jjtree) _DropIndex */
  AST_DropIndex jjtn000 = new AST_DropIndex(JJT_DROPINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _DropIndex */
  try {
/*@egen*/
  <K_DROP> <K_INDEX> <S_IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.fileName = token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DescribeStatement()            : {/*@bgen(jjtree) _Describe */
  AST_Describe jjtn000 = new AST_Describe(JJT_DESCRIBE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _Describe */
  try {
/*@egen*/
  <K_DESCRIBE> <S_IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.fileName = token.image;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InsertStatement()          : {/*@bgen(jjtree) _Insert */
  AST_Insert jjtn000 = new AST_Insert(JJT_INSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _Insert */
  try {
/*@egen*/
  <K_INSERT> <K_INTO> <S_IDENTIFIER>
  {jjtn000.fileName = token.image;}
  <K_VALUES> <O_LPAREN> SqlValueExpressionList() <O_RPAREN>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectStatement()          : {/*@bgen(jjtree) _Select */
  AST_Select jjtn000 = new AST_Select(JJT_SELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _Select */
  try {
/*@egen*/
  [<K_EXPLAIN> {jjtn000.isExplain = true;}]
  <K_SELECT> [<K_DISTINCT> {jjtn000.isDistinct = true;}]
  SelectClause()
  FromClause()
  [ WhereClause() ]
  [ OrderByClause() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UpdateStatement()          : {/*@bgen(jjtree) _Update */
  AST_Update jjtn000 = new AST_Update(JJT_UPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _Update */
  try {
/*@egen*/
  <K_UPDATE> <S_IDENTIFIER>
  {jjtn000.fileName = token.image;}
  <K_SET> ColumnValues()
  [ WhereClause() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DeleteStatement()          : {/*@bgen(jjtree) _Delete */
  AST_Delete jjtn000 = new AST_Delete(JJT_DELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _Delete */
  try {
/*@egen*/
  <K_DELETE> [<K_FROM>] <S_IDENTIFIER>
  {jjtn000.fileName = token.image;}
  [ WhereClause() ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*****************************************************************************\
 * Statement Clauses
\*****************************************************************************/

void ColumnList()             : {/*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _IdentList */
  try {
/*@egen*/
  <S_IDENTIFIER> {jjtn000.names.add(token.image);}
  ColumnType()

  ( <O_COMMA>
    <S_IDENTIFIER> {jjtn000.names.add(token.image);}
    ColumnType() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ColumnType()              : {/*@bgen(jjtree) _ColumnType */
  AST_ColumnType jjtn000 = new AST_ColumnType(JJT_COLUMNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ColumnType */
  try {
/*@egen*/
  <K_INTEGER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.type = AttrType.INTEGER;
   jjtn000.size = 4;}
  |
  <K_FLOAT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.type = AttrType.FLOAT;
   jjtn000.size = 4;}
  |
  <K_STRING>
  {jjtn000.type = AttrType.STRING;
   jjtn000.size = 25;}
  [ <O_LPAREN>
    <S_INTEGER> {jjtn000.size = Integer.parseInt(token.image);}
    <O_RPAREN> ]/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SelectClause()             : {/*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _IdentList */
  try {
/*@egen*/
  <O_STAR>
  |
  <S_IDENTIFIER> {jjtn000.names.add(token.image);}
  ( <O_COMMA> <S_IDENTIFIER> {jjtn000.names.add(token.image);} )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FromClause()             : {/*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _IdentList */
  try {
/*@egen*/
  <K_FROM> <S_IDENTIFIER> {jjtn000.names.add(token.image);}
  ( <O_COMMA> <S_IDENTIFIER> {jjtn000.names.add(token.image);} )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhereClause() : {}
{
  <K_WHERE> SqlExpression()
}

void OrderByClause()           : {/*@bgen(jjtree) _OrderBy */
  AST_OrderBy jjtn000 = new AST_OrderBy(JJT_ORDERBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _OrderBy */
  try {
/*@egen*/
  <K_ORDER> <K_BY>

  <S_IDENTIFIER> {jjtn000.addName(token.image);}
  [<K_DESC> {jjtn000.setDesc();}]

  ( <O_COMMA>
    <S_IDENTIFIER> {jjtn000.addName(token.image);}
    [<K_DESC> {jjtn000.setDesc();}] )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ColumnValues()             : {/*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _IdentList */
  try {
/*@egen*/
  <S_IDENTIFIER>
  {jjtn000.names.add(token.image);}
  <O_EQ> SqlValueExpression()

  ( <O_COMMA> <S_IDENTIFIER>
    {jjtn000.names.add(token.image);}
    <O_EQ> SqlValueExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*****************************************************************************\
 * SQL Expressions
\*****************************************************************************/

void SqlExpression()          : {/*@bgen(jjtree) _OrExpr */
  AST_OrExpr jjtn000 = new AST_OrExpr(JJT_OREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _OrExpr */
  try {
/*@egen*/
  SqlAndExpression() ( <K_OR> SqlAndExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SqlAndExpression()           : {/*@bgen(jjtree) _AndExpr */
  AST_AndExpr jjtn000 = new AST_AndExpr(JJT_ANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _AndExpr */
  try {
/*@egen*/
  SqlRelationalExpression() ( <K_AND> SqlRelationalExpression() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SqlRelationalExpression()            : {/*@bgen(jjtree) _ExprPred */
  AST_ExprPred jjtn000 = new AST_ExprPred(JJT_EXPRPRED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ExprPred */
  try {
/*@egen*/
  SqlPrimaryExpression()

  Relop()
  {jjtn000.oper = AttrOperator.toValue(token.image);}

  SqlPrimaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Relop() : {}
{
  <O_EQ> | <O_NEQ> | <O_GT> | <O_GTE> | <O_LT> | <O_LTE>
}

void SqlPrimaryExpression()             : {/*@bgen(jjtree) _ExprValue */
  AST_ExprValue jjtn000 = new AST_ExprValue(JJT_EXPRVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ExprValue */
  try {
/*@egen*/
  <S_IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.type = AttrType.COLNAME;
   jjtn000.value = token.image;}
  |
  SqlValueExpression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.type = ((AST_ExprValue) jjtn000.children[0]).type;
   jjtn000.value = ((AST_ExprValue) jjtn000.children[0]).value;
   jjtn000.children = null;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SqlValueExpression()             : {/*@bgen(jjtree) _ExprValue */
  AST_ExprValue jjtn000 = new AST_ExprValue(JJT_EXPRVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) _ExprValue */
  try {
/*@egen*/
  <S_INTEGER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.type = AttrType.INTEGER;
   jjtn000.value = new Integer(token.image);}
  |
  <S_FLOAT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.type = AttrType.FLOAT;
   jjtn000.value = new Float(token.image);}
  |
  <S_STRING>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.type = AttrType.STRING;
   jjtn000.value = token.image.substring(1, token.image.length() - 1);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SqlValueExpressionList() : {}
{
  SqlValueExpression() ( <O_COMMA> SqlValueExpression() )*
}
