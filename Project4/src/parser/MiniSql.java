/* Generated By:JJTree&JavaCC: Do not edit this line. MiniSql.java */
package parser;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import global.AttrType;
import global.AttrOperator;

@SuppressWarnings({"unchecked", "unused", "static-access"})
public class MiniSql/*@bgen(jjtree)*/implements MiniSqlTreeConstants, MiniSqlConstants {/*@bgen(jjtree)*/
  protected JJTMiniSqlState jjtree = new JJTMiniSqlState();
  public static void main(String args[]) throws ParseException {

    MiniSql p = null;
    if (args.length < 1) {

      System.out.println("Reading from stdin.");
      p = new MiniSql(System.in);

    } else {

      try {
        p = new MiniSql(new DataInputStream(new FileInputStream(args[0])));
        System.out.println("Reading from " + args[0]);
      } catch (FileNotFoundException e) {
        System.out.println(args[0] + " not found; reading from stdin.");
        p = new MiniSql(System.in);
      }

    } // else

    p.SqlStatement();
    System.out.println("Parse Successful");

  }

/*****************************************************************************\
 * Top-Level Statements
\*****************************************************************************/
  final public AST_Start Start() throws ParseException {
                             /*@bgen(jjtree) _Start */
  AST_Start jjtn000 = new AST_Start(JJT_START);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HELP:
        jj_consume_token(K_HELP);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.isHelp = true; {if (true) return jjtn000;}
        break;
      case K_STATS:
        jj_consume_token(K_STATS);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.isStats = true; {if (true) return jjtn000;}
        break;
      case K_QUIT:
        jj_consume_token(K_QUIT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.isQuit = true; {if (true) return jjtn000;}
        break;
      case K_CREATE:
      case K_DELETE:
      case K_DESCRIBE:
      case K_DROP:
      case K_EXPLAIN:
      case K_INSERT:
      case K_SELECT:
      case K_UPDATE:
        SqlStatement();
        jj_consume_token(O_SEMI);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void SqlStatement() throws ParseException {
    if (jj_2_1(2)) {
      CreateTableStmt();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CREATE:
        CreateIndexStmt();
        break;
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_2(2)) {
          DropTableStmt();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_DROP:
            DropIndexStmt();
            break;
          case K_DESCRIBE:
            DescribeStatement();
            break;
          case K_INSERT:
            InsertStatement();
            break;
          case K_EXPLAIN:
          case K_SELECT:
            SelectStatement();
            break;
          case K_UPDATE:
            UpdateStatement();
            break;
          case K_DELETE:
            DeleteStatement();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void CreateTableStmt() throws ParseException {
                                        /*@bgen(jjtree) _CreateTable */
  AST_CreateTable jjtn000 = new AST_CreateTable(JJT_CREATETABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_TABLE);
      jj_consume_token(S_IDENTIFIER);
   jjtn000.fileName = token.image;
      jj_consume_token(O_LPAREN);
      ColumnList();
      jj_consume_token(O_RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void CreateIndexStmt() throws ParseException {
                                        /*@bgen(jjtree) _CreateIndex */
  AST_CreateIndex jjtn000 = new AST_CreateIndex(JJT_CREATEINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CREATE);
      jj_consume_token(K_INDEX);
      jj_consume_token(S_IDENTIFIER);
   jjtn000.fileName = token.image;
      jj_consume_token(K_ON);
      jj_consume_token(S_IDENTIFIER);
   jjtn000.ixTable = token.image;
      jj_consume_token(O_LPAREN);
      jj_consume_token(S_IDENTIFIER);
                             jjtn000.ixColumn = token.image;
      jj_consume_token(O_RPAREN);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DropTableStmt() throws ParseException {
                                    /*@bgen(jjtree) _DropTable */
  AST_DropTable jjtn000 = new AST_DropTable(JJT_DROPTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      jj_consume_token(K_TABLE);
      jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.fileName = token.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DropIndexStmt() throws ParseException {
                                    /*@bgen(jjtree) _DropIndex */
  AST_DropIndex jjtn000 = new AST_DropIndex(JJT_DROPINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DROP);
      jj_consume_token(K_INDEX);
      jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.fileName = token.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DescribeStatement() throws ParseException {
                                       /*@bgen(jjtree) _Describe */
  AST_Describe jjtn000 = new AST_Describe(JJT_DESCRIBE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DESCRIBE);
      jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.fileName = token.image;
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void InsertStatement() throws ParseException {
                                   /*@bgen(jjtree) _Insert */
  AST_Insert jjtn000 = new AST_Insert(JJT_INSERT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_INSERT);
      jj_consume_token(K_INTO);
      jj_consume_token(S_IDENTIFIER);
   jjtn000.fileName = token.image;
      jj_consume_token(K_VALUES);
      jj_consume_token(O_LPAREN);
      SqlValueExpressionList();
      jj_consume_token(O_RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectStatement() throws ParseException {
                                   /*@bgen(jjtree) _Select */
  AST_Select jjtn000 = new AST_Select(JJT_SELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EXPLAIN:
        jj_consume_token(K_EXPLAIN);
                jjtn000.isExplain = true;
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DISTINCT:
        jj_consume_token(K_DISTINCT);
                            jjtn000.isDistinct = true;
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      SelectClause();
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        WhereClause();
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ORDER:
        OrderByClause();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UpdateStatement() throws ParseException {
                                   /*@bgen(jjtree) _Update */
  AST_Update jjtn000 = new AST_Update(JJT_UPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_UPDATE);
      jj_consume_token(S_IDENTIFIER);
   jjtn000.fileName = token.image;
      jj_consume_token(K_SET);
      ColumnValues();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        WhereClause();
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DeleteStatement() throws ParseException {
                                   /*@bgen(jjtree) _Delete */
  AST_Delete jjtn000 = new AST_Delete(JJT_DELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DELETE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_FROM:
        jj_consume_token(K_FROM);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(S_IDENTIFIER);
   jjtn000.fileName = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        WhereClause();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*****************************************************************************\
 * Statement Clauses
\*****************************************************************************/
  final public void ColumnList() throws ParseException {
                                 /*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
                  jjtn000.names.add(token.image);
      ColumnType();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_1;
        }
        jj_consume_token(O_COMMA);
        jj_consume_token(S_IDENTIFIER);
                    jjtn000.names.add(token.image);
        ColumnType();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnType() throws ParseException {
                                  /*@bgen(jjtree) _ColumnType */
  AST_ColumnType jjtn000 = new AST_ColumnType(JJT_COLUMNTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INTEGER:
        jj_consume_token(K_INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.type = AttrType.INTEGER;
   jjtn000.size = 4;
        break;
      case K_FLOAT:
        jj_consume_token(K_FLOAT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.type = AttrType.FLOAT;
   jjtn000.size = 4;
        break;
      case K_STRING:
        jj_consume_token(K_STRING);
   jjtn000.type = AttrType.STRING;
   jjtn000.size = 25;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_LPAREN:
          jj_consume_token(O_LPAREN);
          jj_consume_token(S_INTEGER);
                 jjtn000.size = Integer.parseInt(token.image);
          jj_consume_token(O_RPAREN);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectClause() throws ParseException {
                                   /*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_STAR:
        jj_consume_token(O_STAR);
        break;
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
                  jjtn000.names.add(token.image);
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case O_COMMA:
            ;
            break;
          default:
            jj_la1[13] = jj_gen;
            break label_2;
          }
          jj_consume_token(O_COMMA);
          jj_consume_token(S_IDENTIFIER);
                              jjtn000.names.add(token.image);
        }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FromClause() throws ParseException {
                                 /*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FROM);
      jj_consume_token(S_IDENTIFIER);
                           jjtn000.names.add(token.image);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_3;
        }
        jj_consume_token(O_COMMA);
        jj_consume_token(S_IDENTIFIER);
                              jjtn000.names.add(token.image);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhereClause() throws ParseException {
    jj_consume_token(K_WHERE);
    SqlExpression();
  }

  final public void OrderByClause() throws ParseException {
                                  /*@bgen(jjtree) _OrderBy */
  AST_OrderBy jjtn000 = new AST_OrderBy(JJT_ORDERBY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ORDER);
      jj_consume_token(K_BY);
      jj_consume_token(S_IDENTIFIER);
                  jjtn000.addName(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DESC:
        jj_consume_token(K_DESC);
             jjtn000.setDesc();
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_4;
        }
        jj_consume_token(O_COMMA);
        jj_consume_token(S_IDENTIFIER);
                    jjtn000.addName(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DESC:
          jj_consume_token(K_DESC);
               jjtn000.setDesc();
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnValues() throws ParseException {
                                   /*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
   jjtn000.names.add(token.image);
      jj_consume_token(O_EQ);
      SqlValueExpression();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        jj_consume_token(O_COMMA);
        jj_consume_token(S_IDENTIFIER);
     jjtn000.names.add(token.image);
        jj_consume_token(O_EQ);
        SqlValueExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*****************************************************************************\
 * SQL Expressions
\*****************************************************************************/
  final public void SqlExpression() throws ParseException {
                                 /*@bgen(jjtree) _OrExpr */
  AST_OrExpr jjtn000 = new AST_OrExpr(JJT_OREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SqlAndExpression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_6;
        }
        jj_consume_token(K_OR);
        SqlAndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SqlAndExpression() throws ParseException {
                                     /*@bgen(jjtree) _AndExpr */
  AST_AndExpr jjtn000 = new AST_AndExpr(JJT_ANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SqlRelationalExpression();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_7;
        }
        jj_consume_token(K_AND);
        SqlRelationalExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SqlRelationalExpression() throws ParseException {
                                             /*@bgen(jjtree) _ExprPred */
  AST_ExprPred jjtn000 = new AST_ExprPred(JJT_EXPRPRED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SqlPrimaryExpression();
      Relop();
   jjtn000.oper = AttrOperator.toValue(token.image);
      SqlPrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case O_EQ:
      jj_consume_token(O_EQ);
      break;
    case O_NEQ:
      jj_consume_token(O_NEQ);
      break;
    case O_GT:
      jj_consume_token(O_GT);
      break;
    case O_GTE:
      jj_consume_token(O_GTE);
      break;
    case O_LT:
      jj_consume_token(O_LT);
      break;
    case O_LTE:
      jj_consume_token(O_LTE);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SqlPrimaryExpression() throws ParseException {
                                           /*@bgen(jjtree) _ExprValue */
  AST_ExprValue jjtn000 = new AST_ExprValue(JJT_EXPRVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.type = AttrType.COLNAME;
   jjtn000.value = token.image;
        break;
      case S_INTEGER:
      case S_FLOAT:
      case S_STRING:
        SqlValueExpression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.type = ((AST_ExprValue) jjtn000.children[0]).type;
   jjtn000.value = ((AST_ExprValue) jjtn000.children[0]).value;
   jjtn000.children = null;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SqlValueExpression() throws ParseException {
                                         /*@bgen(jjtree) _ExprValue */
  AST_ExprValue jjtn000 = new AST_ExprValue(JJT_EXPRVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        jj_consume_token(S_INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.type = AttrType.INTEGER;
   jjtn000.value = new Integer(token.image);
        break;
      case S_FLOAT:
        jj_consume_token(S_FLOAT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.type = AttrType.FLOAT;
   jjtn000.value = new Float(token.image);
        break;
      case S_STRING:
        jj_consume_token(S_STRING);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.type = AttrType.STRING;
   jjtn000.value = token.image.substring(1, token.image.length() - 1);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SqlValueExpressionList() throws ParseException {
    SqlValueExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(O_COMMA);
      SqlValueExpression();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_3R_9() {
    if (jj_scan_token(K_CREATE)) return true;
    if (jj_scan_token(K_TABLE)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(K_DROP)) return true;
    if (jj_scan_token(K_TABLE)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  public MiniSqlTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xa608eb00,0x100,0x84086a00,0x4000,0x1000,0x0,0x1000000,0x0,0x20000,0x0,0x0,0x0,0x10110000,0x0,0x0,0x0,0x400,0x0,0x400,0x0,0x800000,0x40,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x2,0x400,0x100,0x0,0x400,0x11000,0x400,0x0,0x400,0x0,0x400,0x0,0x0,0xfc,0x9a000,0x8a000,0x400,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public MiniSql(java.io.InputStream stream) {
     this(stream, null);
  }
  public MiniSql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MiniSql(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MiniSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public MiniSql(MiniSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(MiniSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[54];
    for (int i = 0; i < 54; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
